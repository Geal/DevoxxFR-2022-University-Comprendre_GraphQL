{"version":3,"file":"Metric.js","sourceRoot":"","sources":["../../../src/types/Metric.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAmDH,gEAAgE;AAChE,MAAM,CAAN,IAAY,SAGX;AAHD,WAAY,SAAS;IACnB,uCAAG,CAAA;IACH,6CAAM,CAAA;AACR,CAAC,EAHW,SAAS,KAAT,SAAS,QAGpB;AAED,8BAA8B;AAC9B,MAAM,CAAN,IAAY,sBAIX;AAJD,WAAY,sBAAsB;IAChC,iIAAmC,CAAA;IACnC,qHAA6B,CAAA;IAC7B,+HAAkC,CAAA;AACpC,CAAC,EAJW,sBAAsB,KAAtB,sBAAsB,QAIjC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Observation,\n} from './Observation';\n\n/**\n * Options needed for metric creation\n */\nexport interface MetricOptions {\n  /** The name of the component that reports the Metric. */\n  component?: string;\n\n  /**\n   * The description of the Metric.\n   * @default ''\n   */\n  description?: string;\n\n  /**\n   * The unit of the Metric values.\n   * @default '1'\n   */\n  unit?: string;\n\n  /** The map of constant attributes for the Metric. */\n  constantAttributes?: Map<string, string>;\n\n  /**\n   * Indicates the metric is a verbose metric that is disabled by default\n   * @default false\n   */\n  disabled?: boolean;\n\n  /**\n   * Indicates the type of the recorded value.\n   * @default {@link ValueType.DOUBLE}\n   */\n  valueType?: ValueType;\n\n  /**\n   * Boundaries optional for histogram\n   */\n  boundaries?: number[];\n\n  /**\n   * Aggregation Temporality of metric\n   */\n  aggregationTemporality?: AggregationTemporality;\n}\n\n/** The Type of value. It describes how the data is reported. */\nexport enum ValueType {\n  INT,\n  DOUBLE,\n}\n\n/** The kind of aggregator. */\nexport enum AggregationTemporality {\n  AGGREGATION_TEMPORALITY_UNSPECIFIED,\n  AGGREGATION_TEMPORALITY_DELTA,\n  AGGREGATION_TEMPORALITY_CUMULATIVE,\n}\n\n/**\n * Counter is the most common synchronous instrument. This instrument supports\n * an `Add(increment)` function for reporting a sum, and is restricted to\n * non-negative increments. The default aggregation is Sum, as for any additive\n * instrument.\n *\n * Example uses for Counter:\n * <ol>\n *   <li> count the number of bytes received. </li>\n *   <li> count the number of requests completed. </li>\n *   <li> count the number of accounts created. </li>\n *   <li> count the number of checkpoints run. </li>\n *   <li> count the number of 5xx errors. </li>\n * <ol>\n */\nexport interface Counter {\n  /**\n   * Increment value of counter by the input. Inputs may not be negative.\n   */\n  add(value: number, attributes?: Attributes): void;\n}\n\nexport interface UpDownCounter {\n  /**\n   * Increment value of counter by the input. Inputs may be negative.\n   */\n  add(value: number, attributes?: Attributes): void;\n}\n\nexport interface Histogram {\n  /**\n   * Records the given value to this histogram.\n   */\n  record(value: number, attributes?: Attributes): void;\n}\n\n/** Base interface for the Observable metrics. */\nexport interface ObservableBase {\n  observation: (\n    value: number,\n    attributes?: Attributes,\n  ) => Observation;\n}\n\n/** Base interface for the ObservableGauge metrics. */\nexport type ObservableGauge = ObservableBase;\n\n/** Base interface for the ObservableUpDownCounter metrics. */\nexport type ObservableUpDownCounter = ObservableBase;\n\n/** Base interface for the ObservableCounter metrics. */\nexport type ObservableCounter = ObservableBase;\n\n/**\n * key-value pairs passed by the user.\n */\nexport type Attributes = { [key: string]: string };\n"]}