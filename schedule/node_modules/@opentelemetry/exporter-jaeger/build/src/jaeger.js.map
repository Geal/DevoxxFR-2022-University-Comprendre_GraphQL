{"version":3,"file":"jaeger.js","sourceRoot":"","sources":["../../src/jaeger.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { ExportResult, ExportResultCode, getEnv } from '@opentelemetry/core';\nimport { ReadableSpan, SpanExporter } from '@opentelemetry/sdk-trace-base';\nimport { Socket } from 'dgram';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { spanToThrift } from './transform';\nimport * as jaegerTypes from './types';\n\n/**\n * Format and sends span information to Jaeger Exporter.\n */\nexport class JaegerExporter implements SpanExporter {\n  private readonly _onShutdownFlushTimeout: number;\n  private readonly _localConfig: jaegerTypes.ExporterConfig;\n  private _isShutdown = false;\n  private _shutdownFlushTimeout: NodeJS.Timeout | undefined;\n  private _shuttingDownPromise: Promise<void> = Promise.resolve();\n\n  private _sender?: typeof jaegerTypes.UDPSender;\n\n  constructor(config?: jaegerTypes.ExporterConfig) {\n    const localConfig = Object.assign({}, config);\n    this._onShutdownFlushTimeout =\n      typeof localConfig.flushTimeout === 'number'\n        ? localConfig.flushTimeout\n        : 2000;\n\n    // https://github.com/jaegertracing/jaeger-client-node#environment-variables\n    // By default, the client sends traces via UDP to the agent at localhost:6832. Use OTEL_EXPORTER_JAEGER_AGENT_HOST and\n    // JAEGER_AGENT_PORT to send UDP traces to a different host:port. If OTEL_EXPORTER_JAEGER_ENDPOINT is set, the client sends traces\n    // to the endpoint via HTTP, making the OTEL_EXPORTER_JAEGER_AGENT_HOST and JAEGER_AGENT_PORT unused. If OTEL_EXPORTER_JAEGER_ENDPOINT is secured,\n    // HTTP basic authentication can be performed by setting the OTEL_EXPORTER_JAEGER_USER and OTEL_EXPORTER_JAEGER_PASSWORD environment variables.\n\n    const env = getEnv();\n    localConfig.endpoint =\n      localConfig.endpoint || env.OTEL_EXPORTER_JAEGER_ENDPOINT;\n    localConfig.username =\n      localConfig.username || env.OTEL_EXPORTER_JAEGER_USER;\n    localConfig.password =\n      localConfig.password || env.OTEL_EXPORTER_JAEGER_PASSWORD;\n    localConfig.host = localConfig.host || env.OTEL_EXPORTER_JAEGER_AGENT_HOST;\n\n    this._localConfig = localConfig;\n  }\n\n  /** Exports a list of spans to Jaeger. */\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    if (spans.length === 0) {\n      return resultCallback({ code: ExportResultCode.SUCCESS });\n    }\n    diag.debug('Jaeger exporter export');\n    this._sendSpans(spans, resultCallback).catch(error => {\n      return resultCallback({ code: ExportResultCode.FAILED, error });\n    });\n  }\n\n  /** Shutdown exporter. */\n  shutdown(): Promise<void> {\n    if (this._isShutdown) {\n      return this._shuttingDownPromise;\n    }\n    this._isShutdown = true;\n\n    this._shuttingDownPromise = new Promise((resolve, reject) => {\n      let rejected = false;\n      this._shutdownFlushTimeout = setTimeout(() => {\n        rejected = true;\n        reject('timeout');\n        this._sender.close();\n      }, this._onShutdownFlushTimeout);\n\n      Promise.resolve()\n        .then(() => {\n          // Make an optimistic flush.\n          return this._flush();\n        })\n        .then(() => {\n          if (rejected) {\n            return;\n          } else {\n            this._shutdownFlushTimeout &&\n              clearTimeout(this._shutdownFlushTimeout);\n            resolve();\n            this._sender.close();\n          }\n        })\n        .catch(e => {\n          reject(e);\n        });\n    });\n    return this._shuttingDownPromise;\n  }\n\n  /** Transform spans and sends to Jaeger service. */\n  private async _sendSpans(\n    spans: ReadableSpan[],\n    done?: (result: ExportResult) => void\n  ) {\n    const thriftSpan = spans.map(span => spanToThrift(span));\n    for (const span of thriftSpan) {\n      try {\n        await this._append(span);\n      } catch (error) {\n        // TODO right now we break out on first error, is that desirable?\n        if (done) return done({ code: ExportResultCode.FAILED, error });\n      }\n    }\n    diag.debug(`successful append for : ${thriftSpan.length}`);\n\n    // Flush all spans on each export. No-op if span buffer is empty\n    await this._flush();\n\n    if (done) return process.nextTick(done, { code: ExportResultCode.SUCCESS });\n  }\n\n  private async _append(span: jaegerTypes.ThriftSpan): Promise<number> {\n    return new Promise((resolve, reject) => {\n      this._getSender(span).append(span, (count: number, err?: string) => {\n        if (err) {\n          return reject(new Error(err));\n        }\n        resolve(count);\n      });\n    });\n  }\n\n  private _getSender(span: jaegerTypes.ThriftSpan): typeof jaegerTypes.UDPSender {\n    if (this._sender) {\n      return this._sender;\n    }\n\n    const sender = this._localConfig.endpoint ? new jaegerTypes.HTTPSender(this._localConfig) : new jaegerTypes.UDPSender(this._localConfig);\n\n    if (sender._client instanceof Socket) {\n      // unref socket to prevent it from keeping the process running\n      sender._client.unref();\n    }\n\n    const serviceNameTag = span.tags.find(t => t.key === SemanticResourceAttributes.SERVICE_NAME)\n    const serviceName = serviceNameTag?.vStr || 'unknown_service';\n\n    sender.setProcess({\n      serviceName,\n      tags: jaegerTypes.ThriftUtils.getThriftTags(this._localConfig.tags || []),\n    });\n\n    this._sender = sender;\n    return sender;\n  }\n\n  private async _flush(): Promise<void> {\n    await new Promise<void>((resolve, reject) => {\n      if (!this._sender) {\n        return resolve();\n      }\n\n      this._sender.flush((_count: number, err?: string) => {\n        if (err) {\n          return reject(new Error(err));\n        }\n        diag.debug(`successful flush for ${_count} spans`);\n        resolve();\n      });\n    });\n  }\n}\n"]}