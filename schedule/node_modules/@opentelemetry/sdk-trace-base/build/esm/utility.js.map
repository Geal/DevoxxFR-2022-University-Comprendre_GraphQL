{"version":3,"file":"utility.js","sourceRoot":"","sources":["../../src/utility.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AAEH,OAAO,EAAE,oCAAoC,EAAE,6BAA6B,EAAE,MAAM,qBAAqB,CAAC;AAG1G,OAAO,EAAE,mBAAmB,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAG/D;;;GAGG;AACH,MAAM,UAAU,WAAW,CAAC,UAAwB;IAKlD,IAAM,mBAAmB,GAA0B;QACjD,OAAO,EAAE,mBAAmB,EAAE;KAC/B,CAAC;IAEF,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAC1B,EAAE,EACF,cAAc,EACd,mBAAmB,EACnB,UAAU,CACX,CAAC;IAEF,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,MAAM,CAClC,EAAE,EACF,cAAc,CAAC,aAAa,EAC5B,UAAU,CAAC,aAAa,IAAI,EAAE,CAC/B,CAAC;IAEF,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC,MAAM,CAC/B,EAAE,EACF,cAAc,CAAC,UAAU,EACzB,UAAU,CAAC,UAAU,IAAI,EAAE,CAC5B,CAAC;IAEF;;;OAGG;IACH,IAAI,MAAM,CAAC,UAAU,CAAC,mBAAmB,KAAK,6BAA6B,IAAI,MAAM,CAAC,aAAa,CAAC,mBAAmB,KAAK,6BAA6B,EAAE;QACzJ,MAAM,CAAC,UAAU,CAAC,mBAAmB,GAAG,MAAM,CAAC,aAAa,CAAC,mBAAmB,CAAC;KAClF;IAED;;;OAGG;IACH,IAAI,MAAM,CAAC,UAAU,CAAC,yBAAyB,KAAK,oCAAoC,IAAI,MAAM,CAAC,aAAa,CAAC,yBAAyB,KAAK,oCAAoC,EAAE;QACnL,MAAM,CAAC,UAAU,CAAC,yBAAyB,GAAG,MAAM,CAAC,aAAa,CAAC,yBAAyB,CAAC;KAC9F;IAED,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT, DEFAULT_ATTRIBUTE_COUNT_LIMIT } from '@opentelemetry/core';\n\nimport { Sampler } from '@opentelemetry/api';\nimport { buildSamplerFromEnv, DEFAULT_CONFIG } from './config';\nimport { SpanLimits, TracerConfig, GeneralLimits } from './types';\n\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nexport function mergeConfig(userConfig: TracerConfig): TracerConfig & {\n  sampler: Sampler;\n  spanLimits: SpanLimits;\n  generalLimits: GeneralLimits;\n} {\n  const perInstanceDefaults: Partial<TracerConfig> = {\n    sampler: buildSamplerFromEnv(),\n  };\n\n  const target = Object.assign(\n    {},\n    DEFAULT_CONFIG,\n    perInstanceDefaults,\n    userConfig\n  );\n\n  target.generalLimits = Object.assign(\n    {},\n    DEFAULT_CONFIG.generalLimits,\n    userConfig.generalLimits || {}\n  );\n\n  target.spanLimits = Object.assign(\n    {},\n    DEFAULT_CONFIG.spanLimits,\n    userConfig.spanLimits || {}\n  );\n\n  /**\n   * When span attribute count limit is not defined, but general attribute count limit is defined\n   * Then, span attribute count limit will be same as general one\n   */\n  if (target.spanLimits.attributeCountLimit === DEFAULT_ATTRIBUTE_COUNT_LIMIT && target.generalLimits.attributeCountLimit !== DEFAULT_ATTRIBUTE_COUNT_LIMIT) {\n    target.spanLimits.attributeCountLimit = target.generalLimits.attributeCountLimit;\n  }\n\n  /**\n   * When span attribute value length limit is not defined, but general attribute value length limit is defined\n   * Then, span attribute value length limit will be same as general one\n   */\n  if (target.spanLimits.attributeValueLengthLimit === DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT && target.generalLimits.attributeValueLengthLimit !== DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT) {\n    target.spanLimits.attributeValueLengthLimit = target.generalLimits.attributeValueLengthLimit;\n  }\n\n  return target;\n}\n"]}