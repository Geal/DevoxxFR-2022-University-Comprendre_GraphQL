import { Observation } from './Observation';
/**
 * Options needed for metric creation
 */
export interface MetricOptions {
    /** The name of the component that reports the Metric. */
    component?: string;
    /**
     * The description of the Metric.
     * @default ''
     */
    description?: string;
    /**
     * The unit of the Metric values.
     * @default '1'
     */
    unit?: string;
    /** The map of constant attributes for the Metric. */
    constantAttributes?: Map<string, string>;
    /**
     * Indicates the metric is a verbose metric that is disabled by default
     * @default false
     */
    disabled?: boolean;
    /**
     * Indicates the type of the recorded value.
     * @default {@link ValueType.DOUBLE}
     */
    valueType?: ValueType;
    /**
     * Boundaries optional for histogram
     */
    boundaries?: number[];
    /**
     * Aggregation Temporality of metric
     */
    aggregationTemporality?: AggregationTemporality;
}
/** The Type of value. It describes how the data is reported. */
export declare enum ValueType {
    INT = 0,
    DOUBLE = 1
}
/** The kind of aggregator. */
export declare enum AggregationTemporality {
    AGGREGATION_TEMPORALITY_UNSPECIFIED = 0,
    AGGREGATION_TEMPORALITY_DELTA = 1,
    AGGREGATION_TEMPORALITY_CUMULATIVE = 2
}
/**
 * Counter is the most common synchronous instrument. This instrument supports
 * an `Add(increment)` function for reporting a sum, and is restricted to
 * non-negative increments. The default aggregation is Sum, as for any additive
 * instrument.
 *
 * Example uses for Counter:
 * <ol>
 *   <li> count the number of bytes received. </li>
 *   <li> count the number of requests completed. </li>
 *   <li> count the number of accounts created. </li>
 *   <li> count the number of checkpoints run. </li>
 *   <li> count the number of 5xx errors. </li>
 * <ol>
 */
export interface Counter {
    /**
     * Increment value of counter by the input. Inputs may not be negative.
     */
    add(value: number, attributes?: Attributes): void;
}
export interface UpDownCounter {
    /**
     * Increment value of counter by the input. Inputs may be negative.
     */
    add(value: number, attributes?: Attributes): void;
}
export interface Histogram {
    /**
     * Records the given value to this histogram.
     */
    record(value: number, attributes?: Attributes): void;
}
/** Base interface for the Observable metrics. */
export interface ObservableBase {
    observation: (value: number, attributes?: Attributes) => Observation;
}
/** Base interface for the ObservableGauge metrics. */
export declare type ObservableGauge = ObservableBase;
/** Base interface for the ObservableUpDownCounter metrics. */
export declare type ObservableUpDownCounter = ObservableBase;
/** Base interface for the ObservableCounter metrics. */
export declare type ObservableCounter = ObservableBase;
/**
 * key-value pairs passed by the user.
 */
export declare type Attributes = {
    [key: string]: string;
};
//# sourceMappingURL=Metric.d.ts.map