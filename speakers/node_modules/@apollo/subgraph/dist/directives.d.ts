import { GraphQLDirective, GraphQLNamedType, DirectiveNode, GraphQLField, FieldDefinitionNode, InputValueDefinitionNode, SchemaDefinitionNode, TypeSystemExtensionNode, TypeDefinitionNode, ExecutableDefinitionNode, DirectiveDefinitionNode, GraphQLSchema, GraphQLArgument, GraphQLEnumValue, GraphQLInputField, EnumValueDefinitionNode } from 'graphql';
export declare const KeyDirective: GraphQLDirective;
export declare const ExtendsDirective: GraphQLDirective;
export declare const ExternalDirective: GraphQLDirective;
export declare const RequiresDirective: GraphQLDirective;
export declare const ProvidesDirective: GraphQLDirective;
export declare const TagDirective: GraphQLDirective;
export declare const ShareableDirective: GraphQLDirective;
export declare const LinkDirective: GraphQLDirective;
export declare const InaccessibleDirective: GraphQLDirective;
export declare const OverrideDirective: GraphQLDirective;
export declare const federationDirectives: GraphQLDirective[];
export declare function isFederationDirective(directive: GraphQLDirective): boolean;
export declare type ASTNodeWithDirectives = FieldDefinitionNode | InputValueDefinitionNode | EnumValueDefinitionNode | ExecutableDefinitionNode | SchemaDefinitionNode | TypeDefinitionNode | TypeSystemExtensionNode;
export declare type GraphQLNamedTypeWithDirectives = GraphQLNamedType;
export declare function gatherDirectives(element: GraphQLSchema | GraphQLNamedType | GraphQLField<any, any> | GraphQLArgument | GraphQLEnumValue | GraphQLInputField): DirectiveNode[];
export declare function typeIncludesDirective(type: GraphQLNamedType, directiveName: string): boolean;
export declare function directiveDefinitionsAreCompatible(baseDefinition: DirectiveDefinitionNode, toCompare: DirectiveDefinitionNode): boolean;
//# sourceMappingURL=directives.d.ts.map