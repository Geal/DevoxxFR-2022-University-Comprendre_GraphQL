{"version":3,"file":"ProcessDetector.js","sourceRoot":"","sources":["../../../../../src/platform/node/detectors/ProcessDetector.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,OAAO,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AAC1C,OAAO,EAAE,0BAA0B,EAAE,MAAM,qCAAqC,CAAC;AACjF,OAAO,EAAY,QAAQ,EAA2B,MAAM,WAAW,CAAC;AAGxE;;;GAGG;AACH;IAAA;IAwCA,CAAC;IAvCO,gCAAM,GAAZ,UAAa,MAAgC;;;;;gBACrC,eAAe;oBACnB,GAAC,0BAA0B,CAAC,WAAW,IAAG,OAAO,CAAC,GAAG;oBACrD,GAAC,0BAA0B,CAAC,uBAAuB,IAAG,OAAO,CAAC,KAAK,IAAI,EAAE;oBACzE,GAAC,0BAA0B,CAAC,eAAe,IAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE;oBACnE,GAAC,0BAA0B,CAAC,oBAAoB,IAC9C,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE;uBAC/B,CAAC;gBACF,sBAAO,IAAI,CAAC,sBAAsB,CAAC,eAAe,EAAE,MAAM,CAAC,EAAC;;;KAC7D;IACD;;;;;;OAMG;IACK,gDAAsB,GAA9B,UACE,eAAmC,EACnC,OAAiC;QAEjC,IACE,eAAe,CAAC,0BAA0B,CAAC,uBAAuB,CAAC;YACjE,EAAE;YACJ,eAAe,CAAC,0BAA0B,CAAC,uBAAuB,CAAC;gBACjE,EAAE;YACJ,eAAe,CAAC,0BAA0B,CAAC,eAAe,CAAC,KAAK,EAAE;YAClE,eAAe,CAAC,0BAA0B,CAAC,oBAAoB,CAAC,KAAK,EAAE,EACvE;YACA,IAAI,CAAC,KAAK,CACR,qEAAqE,CACtE,CAAC;YACF,OAAO,QAAQ,CAAC,KAAK,EAAE,CAAC;SACzB;aAAM;YACL,OAAO,IAAI,QAAQ,cACd,eAAe,EAClB,CAAC;SACJ;IACH,CAAC;IACH,sBAAC;AAAD,CAAC,AAxCD,IAwCC;AAED,MAAM,CAAC,IAAM,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Detector, Resource, ResourceDetectionConfig } from '../../../';\nimport { ResourceAttributes } from '../../../types';\n\n/**\n * ProcessDetector will be used to detect the resources related current process running\n * and being instrumented from the NodeJS Process module.\n */\nclass ProcessDetector implements Detector {\n  async detect(config?: ResourceDetectionConfig): Promise<Resource> {\n    const processResource: ResourceAttributes = {\n      [SemanticResourceAttributes.PROCESS_PID]: process.pid,\n      [SemanticResourceAttributes.PROCESS_EXECUTABLE_NAME]: process.title || '',\n      [SemanticResourceAttributes.PROCESS_COMMAND]: process.argv[1] || '',\n      [SemanticResourceAttributes.PROCESS_COMMAND_LINE]:\n        process.argv.join(' ') || '',\n    };\n    return this._getResourceAttributes(processResource, config);\n  }\n  /**\n   * Validates process resource attribute map from process varaibls\n   *\n   * @param processResource The unsantized resource attributes from process as key/value pairs.\n   * @param config: Config\n   * @returns The sanitized resource attributes.\n   */\n  private _getResourceAttributes(\n    processResource: ResourceAttributes,\n    _config?: ResourceDetectionConfig\n  ) {\n    if (\n      processResource[SemanticResourceAttributes.PROCESS_EXECUTABLE_NAME] ===\n        '' ||\n      processResource[SemanticResourceAttributes.PROCESS_EXECUTABLE_PATH] ===\n        '' ||\n      processResource[SemanticResourceAttributes.PROCESS_COMMAND] === '' ||\n      processResource[SemanticResourceAttributes.PROCESS_COMMAND_LINE] === ''\n    ) {\n      diag.debug(\n        'ProcessDetector failed: Unable to find required process resources. '\n      );\n      return Resource.empty();\n    } else {\n      return new Resource({\n        ...processResource,\n      });\n    }\n  }\n}\n\nexport const processDetector = new ProcessDetector();\n"]}